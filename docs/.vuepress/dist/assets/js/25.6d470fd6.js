(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{437:function(s,t,a){"use strict";a.r(t);var n=a(2),r=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"_1-计算机网络"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-计算机网络"}},[s._v("#")]),s._v(" 1.计算机网络")]),s._v(" "),t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#_1-1-常识"}},[s._v("1.1 常识")]),t("ul",[t("li",[t("a",{attrs:{href:"#_1-1-1-osi-tcp-ip"}},[s._v("1.1.1 osi  |  tcp/ip")])]),t("li",[t("a",{attrs:{href:"#_1-2-2-get-post"}},[s._v("1.2.2 get post")])]),t("li",[t("a",{attrs:{href:"#_1-2-3-tcp-常问"}},[s._v("1.2.3  tcp 常问")])]),t("li",[t("a",{attrs:{href:"#_1-2-4-tcp-机制"}},[s._v("1.2.4  tcp 机制")])]),t("li",[t("a",{attrs:{href:"#_1-2-5-其他知识点"}},[s._v("1.2.5 其他知识点")])])])])])]),t("p"),s._v(" "),t("h2",{attrs:{id:"_1-1-常识"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-常识"}},[s._v("#")]),s._v(" 1.1 常识")]),s._v(" "),t("h3",{attrs:{id:"_1-1-1-osi-tcp-ip"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-1-osi-tcp-ip"}},[s._v("#")]),s._v(" 1.1.1 osi  |  tcp/ip")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("OSI")]),s._v("七层协议物理层、数据链路层、网络层（"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v("）、传输层（"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v("和"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v("）、会话层、表示层、应用层（"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v("、WebSocket、"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("FTP")]),s._v("、"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DNS")]),s._v("）\n\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("层协议族按层次分为应用层、传输层、网络层和数据链路层 物理层\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v("协议不仅仅指的是"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 和"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v("两个协议，而是指一个由"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("FTP")]),s._v("、"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SMTP")]),s._v("、"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v("、"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v("、"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v("等协议构成的协议簇， 只是因为在"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v("协议中"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v("协议和"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v("协议最具代表性，所以被称为"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v("协议。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h3",{attrs:{id:"_1-2-2-get-post"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-get-post"}},[s._v("#")]),s._v(" 1.2.2 get post")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("GET")]),s._v(" 和 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("POST")]),s._v(" ⽅法都是安全和幂等的吗？\n在 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 协议⾥，所谓的「安全」是指请求⽅法不会「破坏」服务器上的资源。所谓的「幂等」，意思是多次执⾏相同的操作，结果都是「相同」的。那么很明显 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("GET")]),s._v(" ⽅法就是安全且幂等的，"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("POST")]),s._v(" 因为是「新增或提交数据」的操作，会修改服务器上的资源，所以是不安全的，且多次提交数据就会创建多个资源，所以不是幂等的。\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h3",{attrs:{id:"_1-2-3-tcp-常问"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-3-tcp-常问"}},[s._v("#")]),s._v(" 1.2.3  tcp 常问")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v("协议了解吗"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v("说一下层次结构？"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v("是怎么做到分层的？\n比osi少了会话层和表示层。 我当时忘了有两个协议"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("OSI")]),s._v("七层协议和这玩意\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v("为什么需要 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 协议？ "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" ⼯作在哪⼀层？可靠性，传输层\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v("什么是 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" ？ 面向连接的（只能一对一），可靠的（使命必达），基于字节流的通信协议（字节组成，无边界"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("就是多大都可以）\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v(" 和 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 有什么区别呢？分别的应⽤场景是？\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.1")]),s._v(" 连接："),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v(" 利⽤ "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v(" 提供⾯向「⽆连接」的通信服务，"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v("面向连接的的可靠的\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.2")]),s._v(" 可靠："),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v(" 到达不可靠\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.3")]),s._v(" 控制：拥塞控制和流ᰁ控制机制，保证数据传输的安全性\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.4")]),s._v(" 传输方式："),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v("是包发送"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("分片（网络层分片）   "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 是流式传输"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("分片（传输层分片）\n传输层\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5.")]),s._v("如何在 Linux 系统中查看 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 状态？\nnetstat "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("napt\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6.")]),s._v("为什么一定要三次握手？不使⽤「两次握⼿」和「四次握⼿」的原因：\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6.1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("RFC")]),s._v("规范：防止旧的重复连接初始化造成混乱。如果是历史连接（序列号过期或超时），则第三次握⼿发送的报⽂是 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("RST")]),s._v(" 报⽂，以此中⽌历史连接 （时间通道）\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6.2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("同步双⽅初始序列号")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("物理通道"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("避免资源浪费\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.")]),s._v("什么是 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SYN")]),s._v(" 攻击？如何避免 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SYN")]),s._v(" 攻击？\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("what 假设攻击者短时间伪造不同 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v(" 地址的 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SYN")]),s._v(" 报⽂，服务端每接收到⼀个 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SYN")]),s._v(" 报⽂，就进⼊ "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SYN_RCVD")]),s._v(" 状态，⽆法得到未知 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v(" 主机的 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ACK")]),s._v(" 应答，久⽽久之就会占满服务端的 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SYN")]),s._v(" 接收队列（未连接队列），使得服务器不能为正常⽤户服务。\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("how \n通过修改 Linux 内核参数，控制队列⼤⼩和当队列满时应做什么处理\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.")]),s._v("初始序列号 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ISN")]),s._v(" 是如何随机产⽣的？\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ISN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("M")]),s._v("（每隔4s"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("的计时器。male） "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("F")]),s._v("（Hash 算法，根据源 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v("、⽬的 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v("、源端⼝、⽬的端⼝⽣成⼀个随机数值 female）\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9.")]),s._v("为什么四次挥手\n服务端通常需要等待完成数据的发送和处理，所以服务端的 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ACK")]),s._v(" 和 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("FIN")]),s._v(" ⼀般都会分开发送，从⽽⽐三次握⼿导致多了⼀次。\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10.")]),s._v("为什么 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TIME_WAIT")]),s._v(" 等待的时间是 2MSL？\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MSL")]),s._v(" 是 Maximum Segment Lifetime，报⽂最⼤⽣存时间，它是任何报⽂在⽹络上存在的最⻓时间，超过这个时间报⽂将被丢弃。（⼀来⼀回）\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11.")]),s._v("为什么需要 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TIME_WAIT")]),s._v(" 状态\n主动发起关闭连接的⼀⽅，才会有 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TIME")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("WAIT")]),s._v(" 状态\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11.1")]),s._v(" 保证连接正确关闭\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11.2")]),s._v(" 防⽌旧连接的数据包\n此时如果客户端 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TIME")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("WAIT")]),s._v("过短或没有，则就直接进⼊了 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CLOSED")]),s._v(" 状态了，那么服务端则会⼀直处在 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("LASE_ACK")]),s._v(" 状态。\n当客户端发起建⽴连接的 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SYN")]),s._v(" 请求报⽂后，服务端会发送 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("RST")]),s._v(" 报⽂给客户端，连接建⽴的过程就会被终⽌。\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Tcp第三次握手可不可以携带数据？\n第三次握⼿是可以携带数据的，前两次握⼿是不可以携带数据的\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br")])]),t("h3",{attrs:{id:"_1-2-4-tcp-机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-4-tcp-机制"}},[s._v("#")]),s._v(" 1.2.4  tcp 机制")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("重传机制")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("通过序列号与确认应答"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("设定⼀个定时器，当超过指定的时间后，没有收到对⽅的 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ACK")]),s._v(" 确认应答报⽂，就会重发该数据，也就是我们常说的超时重传。\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("滑动窗口")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("窗⼝⼤⼩就是指⽆需等待确认应答，⽽可以继续发送数据的最⼤值，窗的实现实际上是操作系统开辟的⼀个缓存空间，发送⽅主机在等到确认应答返回之前，必须在缓冲区中保留已发送的数据。如果按期收到确认应答，此时数据就可以从缓存区清除。\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("流量控制")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("通信双⽅各声明⼀个缓存⼤⼩的窗口\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.")]),s._v("拥塞控制"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("就是控制⾃⼰，也即控制发送的速度。不能改变世界，就改变⾃⼰嘛\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h3",{attrs:{id:"_1-2-5-其他知识点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-5-其他知识点"}},[s._v("#")]),s._v(" 1.2.5 其他知识点")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v("长连接的缺点"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v("\n可能会损害服务器的整体性能，如apache的长连接时间的长短，直接影响到服务器的并发数。\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP2")]),s._v("是如何解决“队头阻塞”的问题？\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP2")]),s._v(" 并没有解决 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 的队首阻塞问题，它仅仅是通过多路复用解决了以前 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP1")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),s._v("管线化请求时的队首阻塞。\n\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP2")]),s._v(" 是通过分帧并且给每个帧打上流的 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ID")]),s._v(" 去避免依次响应的问题，对方接收到帧之后根据 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ID")]),s._v(" 拼接出流，这样就可以做到乱序响应从而避免请求时的队首阻塞问题\n\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 的阻塞问题是因为传输阶段可能会丢包，一旦丢包就会等待重新发包，阻塞后续传输\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])])])}),[],!1,null,null,null);t.default=r.exports}}]);