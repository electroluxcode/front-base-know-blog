(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{437:function(s,t,a){"use strict";a.r(t);var n=a(2),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"_1-计算机网络"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-计算机网络"}},[s._v("#")]),s._v(" 1.计算机网络")]),s._v(" "),t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#_1-1-常识"}},[s._v("1.1 常识")]),t("ul",[t("li",[t("a",{attrs:{href:"#_1-1-1-osi-tcp-ip"}},[s._v("1.1.1 osi  |  tcp/ip")])]),t("li",[t("a",{attrs:{href:"#_1-1-2-cdn"}},[s._v("1.1.2 cdn")])]),t("li",[t("a",{attrs:{href:"#_1-1-3-websocket"}},[s._v("1.1.3 websocket")])]),t("li",[t("a",{attrs:{href:"#_1-1-4-单工-半双工-全双工"}},[s._v("1.1.4 单工 | 半双工 | 全双工？")])]),t("li",[t("a",{attrs:{href:"#_1-1-5-http-1-0-2-0-3-0"}},[s._v("1.1.5 http | 1.0  | 2.0 |  3.0")])]),t("li",[t("a",{attrs:{href:"#_1-1-6-tcp"}},[s._v("1.1.6 tcp")])])])]),t("li",[t("a",{attrs:{href:"#_1-2-快问快答"}},[s._v("1.2 快问快答")]),t("ul",[t("li",[t("a",{attrs:{href:"#_1-2-1-http"}},[s._v("1.2.1 HTTP")])]),t("li",[t("a",{attrs:{href:"#_1-2-2-get-post"}},[s._v("1.2.2 get post")])]),t("li",[t("a",{attrs:{href:"#_1-2-3-tcp-常问"}},[s._v("1.2.3  tcp 常问")])]),t("li",[t("a",{attrs:{href:"#_1-2-4-tcp-机制"}},[s._v("1.2.4  tcp 机制")])]),t("li",[t("a",{attrs:{href:"#_1-2-5-其他知识点"}},[s._v("1.2.5 其他知识点")])])])])])]),t("p"),s._v(" "),t("p",[s._v("sss")]),s._v(" "),t("h2",{attrs:{id:"_1-1-常识"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-常识"}},[s._v("#")]),s._v(" 1.1 常识")]),s._v(" "),t("h3",{attrs:{id:"_1-1-1-osi-tcp-ip"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-1-osi-tcp-ip"}},[s._v("#")]),s._v(" 1.1.1 osi  |  tcp/ip")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("OSI")]),s._v("七层协议物理层、数据链路层、网络层（"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v("）、传输层（"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v("和"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v("）、会话层、表示层、应用层（"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v("、WebSocket、"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("FTP")]),s._v("、"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DNS")]),s._v("）\n\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("层协议族按层次分为应用层、传输层、网络层和数据链路层 物理层\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v("协议不仅仅指的是"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 和"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v("两个协议，而是指一个由"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("FTP")]),s._v("、"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SMTP")]),s._v("、"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v("、"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v("、"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v("等协议构成的协议簇， 只是因为在"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v("协议中"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v("协议和"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v("协议最具代表性，所以被称为"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v("协议。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h3",{attrs:{id:"_1-1-2-cdn"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-2-cdn"}},[s._v("#")]),s._v(" 1.1.2 cdn")]),s._v(" "),t("p",[s._v("dns解析后，返回全局负载均衡的服务器ip给用户，用户请求这个ip，服务器根据ip返回所在区域的负载均衡服务器ip给用户，负载均衡服务器再找符合用户需求的缓存服务器ip给用户，当没有对应内容就去上一级缓存服务器找，找到后缓存在缓存服务器中，下次请求就快了。")]),s._v(" "),t("h3",{attrs:{id:"_1-1-3-websocket"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-3-websocket"}},[s._v("#")]),s._v(" 1.1.3 websocket")]),s._v(" "),t("p",[s._v("为web客户端和服务端之间提供了一种全双工通信机制，特点是在握手阶段采用http协议，和http一样在tcp基础上同属于应用层协议。websocket不受同源限制，协议的标识符不是http而是ws，如果是加密则为wss。")]),s._v(" "),t("h3",{attrs:{id:"_1-1-4-单工-半双工-全双工"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-4-单工-半双工-全双工"}},[s._v("#")]),s._v(" 1.1.4 单工 | 半双工 | 全双工？")]),s._v(" "),t("p",[s._v("单工是指只能一方传输例如http1.0，半双工是指允许双向传输但同一时间只能单向传，例如http1.1，全双工是指可以同时双向传，例如websocket和http2.0")]),s._v(" "),t("ol",[t("li",[s._v("WebSocket和Ajax区别\nAjax是异步JavaScript和XML，是一种创建交互式网页的技术，websocket是HTML5的一种协议，实现了浏览器和服务器的实时通信。从生命周期来看，websocket是长连接，ajax发送接收后就会断开。从发起人来看，ajax是客户端发起，websocket是服务器和客户端相互推送。")])]),s._v(" "),t("h3",{attrs:{id:"_1-1-5-http-1-0-2-0-3-0"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-5-http-1-0-2-0-3-0"}},[s._v("#")]),s._v(" 1.1.5 http | 1.0  | 2.0 |  3.0")]),s._v(" "),t("p",[s._v("http是建立在tcp上面的协议")]),s._v(" "),t("p",[s._v("多路复用代替原来的序列和阻塞机制，所有就是请求的都是通过一个 TCP 连接完成")]),s._v(" "),t("ol",[t("li",[s._v("http1.1、http2.0、http3.0")])]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"center"}},[s._v("http版本")]),s._v(" "),t("th",{staticStyle:{"text-align":"center"}},[s._v("缺点")]),s._v(" "),t("th",{staticStyle:{"text-align":"center"}},[s._v("优点")])])]),s._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"center"}},[s._v("1.0")]),s._v(" "),t("td",{staticStyle:{"text-align":"center"}},[s._v("不能长连接 | 请求接收都要阻塞")]),s._v(" "),t("td",{staticStyle:{"text-align":"center"}},[s._v("简单明文")])]),s._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[s._v("1.1")]),s._v(" "),t("td",{staticStyle:{"text-align":"center"}},[s._v("队头阻塞")]),s._v(" "),t("td",{staticStyle:{"text-align":"center"}},[s._v("长连接 | 管道⽹络传输")])]),s._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[s._v("2")]),s._v(" "),t("td",{staticStyle:{"text-align":"center"}},[s._v("丢包：多个 HTTP 请求在复⽤⼀个 TCP 连接")]),s._v(" "),t("td",{staticStyle:{"text-align":"center"}},[s._v("全双工 | 优先级 | 多路复⽤ | 压缩头 | 二进制 | HTTPS")])]),s._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[s._v("3")]),s._v(" "),t("td",{staticStyle:{"text-align":"center"}}),s._v(" "),t("td",{staticStyle:{"text-align":"center"}},[s._v("协议：QUIC | UDP链接")])])])]),s._v(" "),t("ol",[t("li",[s._v("http与https\nhttp是超文本明文传输，http是无状态的，不会保存请求和响应之间的通信状态（不过http1.1利用cookie可以存一些内容）。https是http和SSL安全套接层或TLS安全传输层协议组合使用的协议。\nhttp明文传输，并且不对通信双方确认，也不能保证数据的完整性。而HTTPS的SSL可以加密并且对通信双方认证以及数据完整性保护（不会轻易在传输过程中被篡改），更加安全。\n通常HTTP直接和TCP通信，当使用SSL时，则演变成先和SSL通信，再由SSL和TCP通信了。\nhttps端口一般是443，http端口一般是80。\nhttps因为密码计算和协议交互耗时，所以慢一些。")]),s._v(" "),t("li",[s._v("https加密过程\n加密解密用同一个密钥就是对称加密，如果公钥加密私钥解密那就是非对称加密了，HTTPS二者都有，所以是混合加密。使用非对称加密（比如RSA）交换对称加密（比如AES）要用的密钥，这样就确保对称加密的密钥是不被别人知道的。遗憾的是，公钥也可能是不正确的，所以需要数字证书认证机构（CA）颁发的公钥证书。\n具体过程：\n=>服务器把公钥登录至数字证书认证机构\n=>数字证书认证机构向公钥写上数字签名并颁发公钥证书\n=>客户端拿到公钥证书，里面有公钥和数字证书认证机构的数字签名，这样就证明了公钥的真实性\n=>客户端使用公钥对报文加密后发送\n=>服务器使用私钥解密报文，自此SSL认证结束，公钥可信\n=>开始混合加密，先用公钥生成对称加密的密钥，然后服务器用私钥解密出对称加密的密钥，二者开始对称加密会话。")])]),s._v(" "),t("h3",{attrs:{id:"_1-1-6-tcp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-6-tcp"}},[s._v("#")]),s._v(" 1.1.6 tcp")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("三次握手")]),s._v(" "),t("p",[s._v("每个⽅向都需要⼀个 FIN 和⼀个 ACK")]),s._v(" "),t("p",[s._v("为了确认对方的发送和接收能力，要进行三次握手。三次握手的主要流程是：")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"center"}},[s._v("number")]),s._v(" "),t("th",[s._v("who")]),s._v(" "),t("th",[s._v("do what")])])]),s._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"center"}},[s._v("1")]),s._v(" "),t("td",[s._v("client")]),s._v(" "),t("td",[s._v("给server发一个SYN为1的报文 | client处于SYN-SENT状态")])]),s._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[s._v("2")]),s._v(" "),t("td",[s._v("server")]),s._v(" "),t("td",[s._v("给client返回一个SYN和ACK(client的ISN+1) |  server 处于SYN-RCVD状态")])]),s._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[s._v("3")]),s._v(" "),t("td",[s._v("client")]),s._v(" "),t("td",[s._v("给server返回一个ACK(server的ISN+1) |  ESTABLISHED")])])])]),s._v(" "),t("p",[s._v("此时客户端处于ESTABLISHED状态。服务端收到ACK报文后，也处于ESTABLISHED状态，此时双方建立起了连接。")])]),s._v(" "),t("li",[t("p",[s._v("四次挥手")]),s._v(" "),t("p",[s._v("每个⽅向都需要⼀个 FIN 和⼀个 ACK")])])]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"center"}},[s._v("number")]),s._v(" "),t("th",[s._v("who")]),s._v(" "),t("th",[s._v("do what")])])]),s._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"center"}},[s._v("1")]),s._v(" "),t("td",[s._v("client")]),s._v(" "),t("td",[s._v("给server发一个FIN为1的报文 | client 进入 FIN_WAIT_1")])]),s._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[s._v("2")]),s._v(" "),t("td",[s._v("server")]),s._v(" "),t("td",[s._v("给client返回一个ACK | server进⼊CLOSED_WAIT 状态")])]),s._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[s._v("3")]),s._v(" "),t("td",[s._v("client")]),s._v(" "),t("td",[s._v("收到ACK后，client进入FIN_WAIT_2 状态 | server处理完后，发送Fin | server进入 LAST_ACK状态 （主要是这里的等待使得挥手的次数多了一次）")])]),s._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[s._v("4")]),s._v(" "),t("td",[s._v("server")]),s._v(" "),t("td",[s._v("收到Fin报文后，回一个ACK | client进入TIME_WAIT状态 | 受到ACK后，server和client经过2MSL后进入CLOSED状态")])])])]),s._v(" "),t("ol",[t("li",[t("p",[s._v("因为TCP的半关闭性，为了终止一个连接，要经过四次挥手，要发送四个包。具体流程是：")]),s._v(" "),t("p",[s._v("客户端发送一个FIN报文，报文中指定一个序列号，此时客户端处于FIN_WAIT1状态，主动关闭TCP连接，等待服务端的确认=>服务端收到FIN后，发送ACK报文，把客户端的序号值+1作为ACK报文的序列号值，表明收到客户端的报文，此时服务端处于CLOSE_WAIT状态，此时TCP处于半关闭状态，客户端到服务端的连接释放。客户端收到服务端确认后，进入FIN_WAIT2状态，等待服务端发来的连接释放的报文段=>如果服务端也想断开连接了，和之前客户端一样，先发FIN报文并指定一个序列号，此时服务端处于LAST_ACK状态，等待客户端确认=>客户端收到FIN之后，一样回应一个ACK报文，即把服务端的序列号+1作为ACK，此时客户端处于TIME_WAIT状态。需要过一阵子（2MSL：两倍的报文段最大生存时间）来确保服务端收到ACK报文后进入CLOSED状态，服务端收到ACK报文后就处于关闭连接了，处于CLOSED状态。")])]),s._v(" "),t("li",[t("p",[s._v("为什么需要等待2MSL时间？\n不等待的话，如果发送的ACK报文没被接收到，那么处于LAST_ACK的服务端因为超时没收到ACK报文而重发FIN报文，这时候客户端还要等着重发ACK报文。")])]),s._v(" "),t("li",[t("p",[s._v("tcp快速重传\n当有报文段丢失时，会有1个正常的ACK和3个重复的ACK，从而定位是哪个报文段丢失，于是重发该报文段，这样就不需要等待超时重传定时器溢出了")])]),s._v(" "),t("li",[t("p",[s._v("tcp拥塞控制原理\ntcp维护了拥塞窗口和慢启动阈值两个状态。在开始传输时，三次握手后确定各自接收窗口大小，然后初始化各自的拥塞窗口，接着没经过一轮RTT（收发时延），拥塞窗口大小翻倍直至慢启动阈值。如果丢包了，接收端会重复发送ACK让发送端意识到丢包了，就会马上重传，也可以在报文首部加入SACK属性标志那些包到了，然后重传没到的包。发送端发现丢包后，觉得网络进入拥塞状态了，会进入快速恢复阶段：将拥塞阈值降低为拥塞窗口的一半，然后拥塞窗口变成拥塞阈值大小，接着拥塞窗口再线性增加以适应网络状况。")])]),s._v(" "),t("li",[t("p",[s._v("tcp四种定时器\n重传定时器：报文段丢失时会快速重传\n坚持定时器：解决零窗口大小可能导致的dead锁问题\n保活定时器：解决通信双方长时间无数据传输的问题\n2MSL定时器：确保有足够的时间让对端收到ACK报文，否则会重发FIN报文。")])]),s._v(" "),t("li",[t("p",[s._v("tcp滑动窗口：\nTCP需要把发送的数据放到发送缓存区，将接受的数据放到接收缓存区，对缓存区的流量控制，这个过程需要在发送端维护一个发送窗口，在接收端维持一个接收窗口。TCP滑动窗口分为发送窗口和接收窗口。")])]),s._v(" "),t("li",[t("p",[s._v("tcp可靠性如何保证的？使用udp如何做到可靠传输？\n确认机制、重传机制、滑动窗口。如果传输层采用udp，可以在应用层上实现tcp在传输层传输的方式")])]),s._v(" "),t("li",[t("p",[s._v("tcp和udp区别\ntcp是面向连接的，经过三次握手建立连接。udp面向报文，没有连接属性，不需要握手直接传输数据，所以快一些，但是不稳定，常常在直播和语音通话中采用udp传输")]),s._v(" "),t("p",[s._v("相⽐ UDP 多了很多特性，⽐如流量控制、超时重传、拥塞控制等")])])]),s._v(" "),t("h2",{attrs:{id:"_1-2-快问快答"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-快问快答"}},[s._v("#")]),s._v(" 1.2 快问快答")]),s._v(" "),t("h3",{attrs:{id:"_1-2-1-http"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-http"}},[s._v("#")]),s._v(" 1.2.1 HTTP")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("https是啥？超⽂本传输协议。是⼀个在计算机世界⾥专⻔在「两点」之间「传输」⽂字、图⽚、⾳频、视频等「超⽂本」数据的「约定和规范」\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v("那「"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 是⽤于从互联⽹服务器传输超⽂本到本地浏览器的协议 ，这种说法正确吗？\n这种说法是不正确的。因为也可以是「服务器"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("服务器」，所以采⽤两点之间的描述会更准确。\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v("常见http状态码？\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("204")]),s._v("相比于"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),s._v("没有body "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("206")]),s._v("是断点续传的成功态\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("301")]),s._v("是永久重定向，"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("302")]),s._v("是临时重定向（资源还在，带式要用新的url访问）"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("304")]),s._v("是资源未修改。"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("400")]),s._v("和"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("500")]),s._v("都是笼统的错误。"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("403")]),s._v("是forbidden访问资源（权限）。"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("404")]),s._v("是没有资源 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("501")]),s._v("是功能不支持（Not Implemented）  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("502")]),s._v("是网关错误 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("503")]),s._v("是服务器很忙\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("1xx是中间件状态，3xx是重定向，4xx是客户端错误，5xx是服务器错误"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.")]),s._v("你知道的 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 的优点有哪些，怎么体现的？\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.1")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("简单")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("基本的报⽂格式就是 header "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" body ，头部信息也是 key"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("、\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.2")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("灵活和易于扩展")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("header可以随便加"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTPS")]),s._v(" 也就是在 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 与 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 层之间增加"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SSL")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TLS")]),s._v(" 安全传输层，"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" 甚⾄把 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 层换成了基于 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v(" 的"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("QUIC")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.3")]),s._v("应⽤⼴泛和跨平台\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5.")]),s._v("那"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v("的缺点呢？ ⽆状态双刃剑（shop会⾮常麻烦），明⽂传输双刃剑（信息安全）\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6.")]),s._v("那你再说下 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.1")]),s._v(" 的性能如何？\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6.1")]),s._v(" ⻓连接\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6.2")]),s._v(" 管道⽹络传输（即可在同⼀个 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 连接⾥⾯，客户端可以发起多个请求），队头阻塞（上班堵车）。管道机制则是允许浏览器同时发出 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),s._v(" 请求和 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("B")]),s._v(" 请求。但是服务器还是按照顺序，先回应 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),s._v(" 请求，完成后再回应 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("B")]),s._v(" 请求。要是前⾯的回应特别慢，后⾯就会有许多请求排队等着。这称为「队头堵塞」。\n\n总结性能一般般。相对于http2和http3就是为了解决他的问题而设计出来的\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 与 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTPS")]),s._v(" 有哪些区别？\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTPS")]),s._v(" 则解决 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 不安全的缺陷，在"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 和 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" ⽹络层之间加⼊了 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SSL")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TLS")]),s._v(" 安全协议，使得报⽂能够加密传输。（信息加密）\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 的端⼝号是 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("，"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTPS")]),s._v(" 的端⼝号是 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("443")]),s._v("。\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTPS")]),s._v(" 协议需要向 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CA")]),s._v("（证书权威机构）申请数字证书，来保证服务器的身份是可信的（身份证书）\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.4")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 连接建⽴相对简单， "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 三次握⼿之后便可进⾏ "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 的报⽂传输。⽽ "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTPS")]),s._v(" 在 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 三次握⼿之后，还需进⾏ "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SSL")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TLS")]),s._v(" 的握⼿过程，才可进⼊加密报⽂传输（链接过程）\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTPS")]),s._v(" 是如何解决上⾯的三个⻛险的？（明文。被篡改。身份）\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.1")]),s._v(" 信息加密：对称加密只使⽤⼀个密钥，⾮对称加密使⽤两个密钥（一个公钥一个私钥，公钥可以任意分发）"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("公钥加密信息，服务器收到密⽂后，⽤⾃⼰的私钥解密\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.2")]),s._v(" 校验机制：防止信息被篡改"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("摘要算法的⽅式来实现完整性，它能够为数据⽣成独⼀⽆⼆的「指纹」\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.3")]),s._v(" 身份证书：将服务器公钥放⼊到数字证书中，解决了冒充的⻛险。\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9.")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTPS")]),s._v(" 是如何建⽴连接的？其间交互了什么（"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("次）\nClientHello  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("  SeverHello "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" 客户端回应（生成会话密钥） "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("服务器的最后回应\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10.")]),s._v("那上⾯的 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.1")]),s._v(" 的性能瓶颈，"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" 做了什么优化？\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10.1")]),s._v(" 头部压缩："),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("会压缩头（Header）如果你同时发出多个请求，他们的头是⼀样的或是相似的，那么，协议会帮你消除重复的部分。")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HPACK")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("算法")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("client和server维护一张头信息表，相同的发送索引"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10.2")]),s._v(" 二进制：不像http1纯文本的报文，而是采用二进制。增加了传输效率\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10.3")]),s._v(" 多路复⽤：移除了 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.1")]),s._v(" 中的串⾏请求接收，不需要排队等待，也就不会再出现「队头阻塞」\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10.4")]),s._v(" 全双工的通讯：服务器也可以进行发送请求。可以进行服务端的请求发送\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10.5")]),s._v(" 优先级 \n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11.")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" 有哪些缺陷？"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" 做了哪些优化？\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" 主要的问题在于 不能长连接，发送接收都要等待（两边阻塞）\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.1")]),s._v(" 主要的问题在于，管道传输中一个请求阻塞了，队列后面的请求去也被阻塞住了（单边阻塞）\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" 主要的问题在于，多个 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 请求在复⽤⼀个 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 连接，一旦丢包，就会触发tcp的重传机制"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("这都是基于 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 传输层的问题，所以 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" 把 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 下层的 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 协议改成了 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v(" （不阻塞）\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br")])]),t("h3",{attrs:{id:"_1-2-2-get-post"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-get-post"}},[s._v("#")]),s._v(" 1.2.2 get post")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("GET")]),s._v(" 和 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("POST")]),s._v(" ⽅法都是安全和幂等的吗？\n在 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 协议⾥，所谓的「安全」是指请求⽅法不会「破坏」服务器上的资源。所谓的「幂等」，意思是多次执⾏相同的操作，结果都是「相同」的。那么很明显 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("GET")]),s._v(" ⽅法就是安全且幂等的，"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("POST")]),s._v(" 因为是「新增或提交数据」的操作，会修改服务器上的资源，所以是不安全的，且多次提交数据就会创建多个资源，所以不是幂等的。\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h3",{attrs:{id:"_1-2-3-tcp-常问"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-3-tcp-常问"}},[s._v("#")]),s._v(" 1.2.3  tcp 常问")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v("协议了解吗"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v("说一下层次结构？"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v("是怎么做到分层的？\n比osi少了会话层和表示层。 我当时忘了有两个协议"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("OSI")]),s._v("七层协议和这玩意\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v("为什么需要 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 协议？ "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" ⼯作在哪⼀层？可靠性，传输层\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v("什么是 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" ？ 面向连接的（只能一对一），可靠的（使命必达），基于字节流的通信协议（字节组成，无边界"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("就是多大都可以）\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v(" 和 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 有什么区别呢？分别的应⽤场景是？\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.1")]),s._v(" 连接："),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v(" 利⽤ "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v(" 提供⾯向「⽆连接」的通信服务，"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v("面向连接的的可靠的\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.2")]),s._v(" 可靠："),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v(" 到达不可靠\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.3")]),s._v(" 控制：拥塞控制和流ᰁ控制机制，保证数据传输的安全性\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.4")]),s._v(" 传输方式："),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v("是包发送"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("分片（网络层分片）   "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 是流式传输"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("分片（传输层分片）\n传输层\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5.")]),s._v("如何在 Linux 系统中查看 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 状态？\nnetstat "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("napt\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6.")]),s._v("为什么一定要三次握手？不使⽤「两次握⼿」和「四次握⼿」的原因：\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6.1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("RFC")]),s._v("规范：防止旧的重复连接初始化造成混乱。如果是历史连接（序列号过期或超时），则第三次握⼿发送的报⽂是 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("RST")]),s._v(" 报⽂，以此中⽌历史连接 （时间通道）\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6.2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("同步双⽅初始序列号")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("物理通道"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("避免资源浪费\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.")]),s._v("什么是 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SYN")]),s._v(" 攻击？如何避免 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SYN")]),s._v(" 攻击？\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("what 假设攻击者短时间伪造不同 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v(" 地址的 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SYN")]),s._v(" 报⽂，服务端每接收到⼀个 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SYN")]),s._v(" 报⽂，就进⼊ "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SYN_RCVD")]),s._v(" 状态，⽆法得到未知 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v(" 主机的 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ACK")]),s._v(" 应答，久⽽久之就会占满服务端的 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SYN")]),s._v(" 接收队列（未连接队列），使得服务器不能为正常⽤户服务。\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("how \n通过修改 Linux 内核参数，控制队列⼤⼩和当队列满时应做什么处理\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.")]),s._v("初始序列号 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ISN")]),s._v(" 是如何随机产⽣的？\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ISN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("M")]),s._v("（每隔4s"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("的计时器。male） "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("F")]),s._v("（Hash 算法，根据源 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v("、⽬的 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v("、源端⼝、⽬的端⼝⽣成⼀个随机数值 female）\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9.")]),s._v("为什么四次挥手\n服务端通常需要等待完成数据的发送和处理，所以服务端的 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ACK")]),s._v(" 和 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("FIN")]),s._v(" ⼀般都会分开发送，从⽽⽐三次握⼿导致多了⼀次。\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10.")]),s._v("为什么 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TIME_WAIT")]),s._v(" 等待的时间是 2MSL？\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MSL")]),s._v(" 是 Maximum Segment Lifetime，报⽂最⼤⽣存时间，它是任何报⽂在⽹络上存在的最⻓时间，超过这个时间报⽂将被丢弃。（⼀来⼀回）\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11.")]),s._v("为什么需要 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TIME_WAIT")]),s._v(" 状态\n主动发起关闭连接的⼀⽅，才会有 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TIME")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("WAIT")]),s._v(" 状态\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11.1")]),s._v(" 保证连接正确关闭\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11.2")]),s._v(" 防⽌旧连接的数据包\n此时如果客户端 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TIME")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("WAIT")]),s._v("过短或没有，则就直接进⼊了 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CLOSED")]),s._v(" 状态了，那么服务端则会⼀直处在 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("LASE_ACK")]),s._v(" 状态。\n当客户端发起建⽴连接的 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SYN")]),s._v(" 请求报⽂后，服务端会发送 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("RST")]),s._v(" 报⽂给客户端，连接建⽴的过程就会被终⽌。\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Tcp第三次握手可不可以携带数据？\n第三次握⼿是可以携带数据的，前两次握⼿是不可以携带数据的\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br")])]),t("h3",{attrs:{id:"_1-2-4-tcp-机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-4-tcp-机制"}},[s._v("#")]),s._v(" 1.2.4  tcp 机制")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("重传机制")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("通过序列号与确认应答"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("设定⼀个定时器，当超过指定的时间后，没有收到对⽅的 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ACK")]),s._v(" 确认应答报⽂，就会重发该数据，也就是我们常说的超时重传。\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("滑动窗口")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("窗⼝⼤⼩就是指⽆需等待确认应答，⽽可以继续发送数据的最⼤值，窗的实现实际上是操作系统开辟的⼀个缓存空间，发送⽅主机在等到确认应答返回之前，必须在缓冲区中保留已发送的数据。如果按期收到确认应答，此时数据就可以从缓存区清除。\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("流量控制")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("通信双⽅各声明⼀个缓存⼤⼩的窗口\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.")]),s._v("拥塞控制"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("就是控制⾃⼰，也即控制发送的速度。不能改变世界，就改变⾃⼰嘛\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h3",{attrs:{id:"_1-2-5-其他知识点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-5-其他知识点"}},[s._v("#")]),s._v(" 1.2.5 其他知识点")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v("长连接的缺点"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v("\n可能会损害服务器的整体性能，如apache的长连接时间的长短，直接影响到服务器的并发数。\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP2")]),s._v("是如何解决“队头阻塞”的问题？\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP2")]),s._v(" 并没有解决 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 的队首阻塞问题，它仅仅是通过多路复用解决了以前 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP1")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),s._v("管线化请求时的队首阻塞。\n\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP2")]),s._v(" 是通过分帧并且给每个帧打上流的 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ID")]),s._v(" 去避免依次响应的问题，对方接收到帧之后根据 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ID")]),s._v(" 拼接出流，这样就可以做到乱序响应从而避免请求时的队首阻塞问题\n\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 的阻塞问题是因为传输阶段可能会丢包，一旦丢包就会等待重新发包，阻塞后续传输\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])])])}),[],!1,null,null,null);t.default=e.exports}}]);