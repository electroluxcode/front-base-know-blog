import{_ as s,o as a,c as n,R as l}from"./chunks/framework.408c4d71.js";const A=JSON.parse('{"title":"1.vue | 主流方案对比","description":"","frontmatter":{},"headers":[],"relativePath":"know/框架/1vue.md","filePath":"know/框架/1vue.md","lastUpdated":1684754627000}'),p={name:"know/框架/1vue.md"},o=l(`<h1 id="_1-vue-主流方案对比" tabindex="-1">1.vue | 主流方案对比 <a class="header-anchor" href="#_1-vue-主流方案对比" aria-label="Permalink to &quot;1.vue | 主流方案对比&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#_1-0-经典八股">1.0 经典八股</a><ul><li><a href="#_1-0-1-nexttick原理">1.0.1 nexttick原理</a></li><li><a href="#_1-0-2-虚拟dom-diff">1.0.2 虚拟dom+diff</a></li><li><a href="#_1-0-3-scope原理">1.0.3 scope原理</a></li><li><a href="#_1-0-4-data-prop-method的优先级">1.0.4 data，prop，method的优先级</a></li><li><a href="#_1-0-5-diff-深度优先-同层比较">1.0.5 diff | 深度优先，同层比较</a></li><li><a href="#_1-0-6-受控组件和不受控组件">1.0.6 受控组件和不受控组件</a></li><li><a href="#_1-0-8-vue监听范围">1.0.8 vue监听范围</a></li><li><a href="#_1-0-9-vue23自定义指令的区别">1.0.9 vue23自定义指令的区别</a></li><li><a href="#_1-0-10-pinia持久化">1.0.10 pinia持久化</a></li><li><a href="#_1-0-11-vuex的使用">1.0.11 vuex的使用</a></li><li><a href="#_1-0-11-compute和watch的异同">1.0.11 compute和watch的异同</a></li><li><a href="#_1-0-12-在-vue-中为什么不推荐用-index-做-key">1.0.12 在 Vue 中为什么不推荐用 index 做 key</a></li><li><a href="#_1-0-13-vnode是啥-怎么渲染的">1.0.13 vnode是啥，怎么渲染的</a></li><li><a href="#_1-0-14-keep-alive怎么实现">1.0.14 keep alive怎么实现</a></li><li><a href="#_1-0-15-父子组件·渲染顺序">1.0.15 父子组件·渲染顺序</a></li><li><a href="#_1-0-16-生命周期-created-mount-哪里发数据">1.0.16 生命周期 | created | mount 哪里发数据</a></li><li><a href="#_1-0-17-v-model-双向绑定-原理">1.0.17 v-model | 双向绑定 原理</a></li><li><a href="#_1-0-18-组件-插件">1.0.18 组件 | 插件</a></li><li><a href="#_1-0-19-h函数">1.0.19 h函数</a></li><li><a href="#_1-0-30-v-if-v-for">1.0.30 v-if | v-for</a></li><li><a href="#_1-0-31-data为什么是函数">1.0.31 data为什么是函数</a></li></ul></li><li><a href="#_1-3-vue3相关">1.3 vue3相关</a><ul><li><a href="#_1-3-1-vue3-vue2-区别">1.3.1 vue3 | vue2 区别</a></li></ul></li><li><a href="#_1-4-基本知识">1.4 基本知识</a><ul><li><a href="#_1-4-1-composition-api-options-api区别">1.4.1 Composition API,options API区别</a></li><li><a href="#_1-4-2-suspense">1.4.2 Suspense</a></li></ul></li><li><a href="#_1-5-进阶">1.5 进阶</a><ul><li><a href="#_1-5-1-少见的vue钩子">1.5.1 少见的vue钩子</a></li><li><a href="#_1-5-2-vue3-nexttick源码-3-2-45">1.5.2 vue3 nextTick源码（3.2.45）</a></li><li><a href="#_1-5-3-forceupdate原理">1.5.3 $forceUpdate原理</a></li></ul></li><li><a href="#_1-6-项目进阶">1.6 项目进阶</a><ul><li><a href="#_1-6-1-动态侧边栏">1.6.1 动态侧边栏</a></li></ul></li><li><a href="#_1-8-vuex-pinia-redux">1.8 vuex | pinia | redux</a><ul><li><a href="#_1-1-1-上手安装">1.1.1 上手安装</a></li><li><a href="#_1-1-2-使用">1.1.2 使用</a></li><li><a href="#_1-1-3-pinia的-action">1.1.3 pinia的 action</a></li><li><a href="#_1-1-4-mapstate">1.1.4 mapState</a></li><li><a href="#_1-1-5-pinia为什么比vuex好">1.1.5 pinia为什么比vuex好</a></li></ul></li><li><a href="#_1-9-css-in-js方案">1.9 css in js方案</a></li><li><a href="#_1-10-vue脚手架">1.10 vue脚手架</a></li><li><a href="#_1-11-react脚手架">1.11 react脚手架</a></li><li><a href="#_1-12表单方案">1.12表单方案</a></li><li><a href="#_1-13-解决vue-的-seo-首屏">1.13 解决vue 的 seo + 首屏</a></li></ul></nav><h2 id="_1-0-经典八股" tabindex="-1">1.0 经典八股 <a class="header-anchor" href="#_1-0-经典八股" aria-label="Permalink to &quot;1.0 经典八股&quot;">​</a></h2><h3 id="_1-0-1-nexttick原理" tabindex="-1">1.0.1 nexttick原理 <a class="header-anchor" href="#_1-0-1-nexttick原理" aria-label="Permalink to &quot;1.0.1 nexttick原理&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">【1】nextTick 中其实就是封装了异步代码。（promise.then.resolve）</span></span>
<span class="line"><span style="color:#A6ACCD;">【2】Vue 中数据变化到 DOM 更新的过程是异步的，这个异步更新策略内部其实也是用到了 nextTick。</span></span>
<span class="line"><span style="color:#A6ACCD;">【3】本质是事件循环</span></span></code></pre></div><h3 id="_1-0-2-虚拟dom-diff" tabindex="-1">1.0.2 虚拟dom+diff <a class="header-anchor" href="#_1-0-2-虚拟dom-diff" aria-label="Permalink to &quot;1.0.2 虚拟dom+diff&quot;">​</a></h3><p>用js对象描述dom树结构，然后用它构建真正的dom树插入文档。状态发生变化后，重新构造js的dom结构，新的和旧的对比，得出差异。针对差异进行视图更新</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">1.patch  2.patchvnode 3. updateChildren</span></span></code></pre></div><h3 id="_1-0-3-scope原理" tabindex="-1">1.0.3 scope原理 <a class="header-anchor" href="#_1-0-3-scope原理" aria-label="Permalink to &quot;1.0.3 scope原理&quot;">​</a></h3><p>原理是属性选择器。给这个组件添加上dataset-xx就可以了。</p><h3 id="_1-0-4-data-prop-method的优先级" tabindex="-1">1.0.4 data，prop，method的优先级 <a class="header-anchor" href="#_1-0-4-data-prop-method的优先级" aria-label="Permalink to &quot;1.0.4 data，prop，method的优先级&quot;">​</a></h3><p>优先级prop&gt;method&gt;data&gt;compute&gt;watch</p><h3 id="_1-0-5-diff-深度优先-同层比较" tabindex="-1">1.0.5 diff | 深度优先，同层比较 <a class="header-anchor" href="#_1-0-5-diff-深度优先-同层比较" aria-label="Permalink to &quot;1.0.5 diff | 深度优先，同层比较&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">首先我们要知道虚拟dom是表示真实dom的js对象。在我们视图发生变化的时候虚拟dom会发生变化。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">循环从两边向中间比较</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">那么我们这个时候要比对的其实就是两个js对象之间的差异。</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#F78C6C;">1.</span><span style="color:#A6ACCD;"> patch：触发setter和notify方法通过patch比对samevnode。通知watcher。不是同标签直接替换。</span></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#F78C6C;">2.</span><span style="color:#A6ACCD;"> patchvnode比对新老节点，相同直接return，不同分四种情况。其他三种比较简单不说，说一下第四种情况 </span></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#F78C6C;">3.</span><span style="color:#A6ACCD;"> updatechildren比对都有子节点的情况，用的是首尾指针。旧（头）新（头），旧（头）新（尾），旧（尾）新（头），旧（尾）新（尾），循环比对成功的会向中间移动。start跑到end右侧的时候，终止比较。（注意一下，这里是oldvnode和newvnode作比较，生成真实dom</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">这玩意依靠newvnode生成）</span></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">4</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">vue3是增加了静态标记。和一个静态子递归</span></span></code></pre></div><h3 id="_1-0-6-受控组件和不受控组件" tabindex="-1">1.0.6 受控组件和不受控组件 <a class="header-anchor" href="#_1-0-6-受控组件和不受控组件" aria-label="Permalink to &quot;1.0.6 受控组件和不受控组件&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">受控组件 ：  **他的值是否只能由用户设置**。类似于双向绑定。边输入便监听用户数据</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">不受控组件：例如提交时才输出数据</span></span></code></pre></div><h3 id="_1-0-8-vue监听范围" tabindex="-1">1.0.8 vue监听范围 <a class="header-anchor" href="#_1-0-8-vue监听范围" aria-label="Permalink to &quot;1.0.8  vue监听范围&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">proxy为什么能够监听数组</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">proxy第一个参数如果是object的时候，函数会把这个转化成类数组对象，添加length属性</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">vue监听对象</span><span style="color:#A6ACCD;">(new的时候能够被监听_第一次被调用。xx</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">属性</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">xx的时候不会更新，增删改不会更新)。</span><span style="color:#82AAFF;">数组监听</span><span style="color:#A6ACCD;">(push，pop这些方法都可以监听得到)。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">总结一下，array的push，slice都可以被检测到。</span><span style="color:#89DDFF;">{</span><span style="color:#FFCB6B;">data</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">{},{}</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">这种形式的也能够被监测得到。但是如果是</span><span style="color:#89DDFF;">{</span><span style="color:#FFCB6B;">name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">xx</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;">我们想改变name的值得时候不会变。我们想要在name的同级添加一个key也不会监听到</span></span></code></pre></div><h3 id="_1-0-9-vue23自定义指令的区别" tabindex="-1">1.0.9 vue23自定义指令的区别 <a class="header-anchor" href="#_1-0-9-vue23自定义指令的区别" aria-label="Permalink to &quot;1.0.9  vue23自定义指令的区别&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="_1-0-10-pinia持久化" tabindex="-1">1.0.10 pinia持久化 <a class="header-anchor" href="#_1-0-10-pinia持久化" aria-label="Permalink to &quot;1.0.10 pinia持久化&quot;">​</a></h3><h3 id="_1-0-11-vuex的使用" tabindex="-1">1.0.11 vuex的使用 <a class="header-anchor" href="#_1-0-11-vuex的使用" aria-label="Permalink to &quot;1.0.11 vuex的使用&quot;">​</a></h3><p>定义actions，state，mutation。导出后</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">const store = new Vuex.Store({</span></span>
<span class="line"><span style="color:#A6ACCD;">  modules,</span></span>
<span class="line"><span style="color:#A6ACCD;">})</span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">actions是异步操作</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">mutation是同步操作</span></span></code></pre></div><h3 id="_1-0-11-compute和watch的异同" tabindex="-1">1.0.11 compute和watch的异同 <a class="header-anchor" href="#_1-0-11-compute和watch的异同" aria-label="Permalink to &quot;1.0.11 compute和watch的异同&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">同：</span></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">都是基于reative effect</span></span></code></pre></div><h3 id="_1-0-12-在-vue-中为什么不推荐用-index-做-key" tabindex="-1">1.0.12 在 Vue 中为什么不推荐用 index 做 key <a class="header-anchor" href="#_1-0-12-在-vue-中为什么不推荐用-index-做-key" aria-label="Permalink to &quot;1.0.12  在 Vue 中为什么不推荐用 index 做 key&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">key就是唯一标记，用于判断是否有更新dom的依据，但是用index，只要发生增加和删除，必然导致大量index值改变，也就失去了意义了，就和增删数组的时候，直接使用index遍历很容易出错一个道理</span></span></code></pre></div><h3 id="_1-0-13-vnode是啥-怎么渲染的" tabindex="-1">1.0.13 vnode是啥，怎么渲染的 <a class="header-anchor" href="#_1-0-13-vnode是啥-怎么渲染的" aria-label="Permalink to &quot;1.0.13  vnode是啥，怎么渲染的&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">vnode</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">本质上来说就是一个普通的JavaScript对象</span><span style="color:#89DDFF;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">不同类型的vnode实例各自表示不同类型的DOM元素</span><span style="color:#A6ACCD;">(元素节点和文本节点和注释节点)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">低代码平台其实就相当于你要实现一个虚拟dom，也就是vnode</span></span></code></pre></div><h3 id="_1-0-14-keep-alive怎么实现" tabindex="-1">1.0.14 keep alive怎么实现 <a class="header-anchor" href="#_1-0-14-keep-alive怎么实现" aria-label="Permalink to &quot;1.0.14 keep alive怎么实现&quot;">​</a></h3><p>缓存虚拟dom,结合router进行排除</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">原理：它内部定义了一个map，缓存创建过的组件实例，它返回的渲染函数内部会查找内嵌的component组件对应组件的vnode。component的is属性是个响应式数据，因此只要它变化，keep-alive的render函数就会重新执行。</span></span></code></pre></div><h3 id="_1-0-15-父子组件·渲染顺序" tabindex="-1">1.0.15 父子组件·渲染顺序 <a class="header-anchor" href="#_1-0-15-父子组件·渲染顺序" aria-label="Permalink to &quot;1.0.15 父子组件·渲染顺序&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">先是父create 然后 子 mount 然后 子xxx   最后父销毁</span></span></code></pre></div><h3 id="_1-0-16-生命周期-created-mount-哪里发数据" tabindex="-1">1.0.16 生命周期 | created | mount 哪里发数据 <a class="header-anchor" href="#_1-0-16-生命周期-created-mount-哪里发数据" aria-label="Permalink to &quot;1.0.16 生命周期 | created | mount 哪里发数据&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">如果放在 mount 中 ，那么可能会有闪烁的情况出现</span></span>
<span class="line"><span style="color:#A6ACCD;">如果放在 create 中，注意不要操作dom，因为这个时候也拿不到</span></span>
<span class="line"><span style="color:#A6ACCD;">react中就很烦，useEffect 是 mount 。create 没有值</span></span></code></pre></div><h3 id="_1-0-17-v-model-双向绑定-原理" tabindex="-1">1.0.17 v-model | 双向绑定 原理 <a class="header-anchor" href="#_1-0-17-v-model-双向绑定-原理" aria-label="Permalink to &quot;1.0.17 v-model | 双向绑定 原理&quot;">​</a></h3><p>1.语法糖 vue2 是input+value。vue3是update：modelvalue modelvalue 2.vue3移除sync用 vmodel代替 3.多个vmodel</p><p>vue2</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">父组件中 </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">inputComponent</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-model</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Vmodel</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">inputComponent</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">子组件中 </span></span>
<span class="line"><span style="color:#A6ACCD;">model: {</span></span>
<span class="line"><span style="color:#A6ACCD;">    //代表 v-model 绑定的prop名</span></span>
<span class="line"><span style="color:#A6ACCD;">    prop: &#39;vModel&#39;, // 对应 props</span></span>
<span class="line"><span style="color:#A6ACCD;">    //代表 v-model 通知父组件更新属性的事件名,</span></span>
<span class="line"><span style="color:#A6ACCD;">    //通过this.$emit(&#39;change&#39;, event.target.value)    来反复触碰 </span></span>
<span class="line"><span style="color:#A6ACCD;">    event: &#39;change&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">model</span></span></code></pre></div><p>vue3</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">父： </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">Child v</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">model</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">message</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">子</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> props </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineProps</span><span style="color:#A6ACCD;">([</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">modelValue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 接收父组件使用 v-model 传进来的值，必须用 modelValue 这个名字来接收</span></span>
<span class="line"><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> emit </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineEmits</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">update:modelValue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">])</span></span>
<span class="line"><span style="color:#82AAFF;">emit</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">update:modelValue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value)</span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">上面的只是简单说了一下，更加深层次的是</span></span>
<span class="line"><span style="color:#A6ACCD;">0.vue2 和 vue3 分别通过 proxy和 defineproperty</span></span>
<span class="line"><span style="color:#A6ACCD;">1.new Vue 在 Observe(监听器) 对 data 进行响应化处理</span></span>
<span class="line"><span style="color:#A6ACCD;">2.在compile(编译器) 中 对 temple 编译。获取第一步的data并初始化</span></span>
<span class="line"><span style="color:#A6ACCD;">3.定义一个watcher和updated。这个watch用dep来进行管理</span></span>
<span class="line"><span style="color:#A6ACCD;">4.将来data数据变化，会找到dep，通知所有的watch</span></span>
<span class="line"><span style="color:#A6ACCD;">Observe(监听器) - data</span></span>
<span class="line"><span style="color:#A6ACCD;">compile(编译器) - temple</span></span>
<span class="line"><span style="color:#A6ACCD;">dep-watch-updated</span></span></code></pre></div><h3 id="_1-0-18-组件-插件" tabindex="-1">1.0.18 组件 | 插件 <a class="header-anchor" href="#_1-0-18-组件-插件" aria-label="Permalink to &quot;1.0.18 组件 | 插件&quot;">​</a></h3><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">组件很简单就是 vue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">component</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">&lt;</span><span style="color:#FFCB6B;">temple</span><span style="color:#A6ACCD;">&gt;&lt;/</span><span style="color:#FFCB6B;">temple</span><span style="color:#A6ACCD;">&gt;)</span></span>
<span class="line"><span style="color:#A6ACCD;">插件就是</span></span>
<span class="line"><span style="color:#A6ACCD;">plugin</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">vue</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">option</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 可以添加全局变量</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">test</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">xxxxx</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 可以添加全局指令</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">vue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">directive</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">xxx</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,{</span></span>
<span class="line"><span style="color:#F07178;">        bind</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">            </span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//可以注入组件</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">vue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mixin</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">create</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">            </span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="_1-0-19-h函数" tabindex="-1">1.0.19 h函数 <a class="header-anchor" href="#_1-0-19-h函数" aria-label="Permalink to &quot;1.0.19 h函数&quot;">​</a></h3><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">h</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">color:red;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">onClick</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">$event</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Event</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">clicked</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> $event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">target)</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello world ~</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    )</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="_1-0-30-v-if-v-for" tabindex="-1">1.0.30 v-if | v-for <a class="header-anchor" href="#_1-0-30-v-if-v-for" aria-label="Permalink to &quot;1.0.30 v-if | v-for&quot;">​</a></h3><p><code>v-for</code>优先级比<code>v-if</code>高</p><h3 id="_1-0-31-data为什么是函数" tabindex="-1">1.0.31 data为什么是函数 <a class="header-anchor" href="#_1-0-31-data为什么是函数" aria-label="Permalink to &quot;1.0.31 data为什么是函数&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">对象就会重复，因为用了用一个内存地址。funciton不会重复，因为函数的内存地址并不相同</span></span></code></pre></div><h2 id="_1-3-vue3相关" tabindex="-1">1.3 vue3相关 <a class="header-anchor" href="#_1-3-vue3相关" aria-label="Permalink to &quot;1.3 vue3相关&quot;">​</a></h2><h3 id="_1-3-1-vue3-vue2-区别" tabindex="-1">1.3.1 vue3 | vue2 区别 <a class="header-anchor" href="#_1-3-1-vue3-vue2-区别" aria-label="Permalink to &quot;1.3.1 vue3 | vue2 区别&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">vue3是Composition API。vue2使用的是options API</span></span>
<span class="line"><span style="color:#A6ACCD;">组合api中有响应式函数：reactive，ref  API</span></span>
<span class="line"><span style="color:#A6ACCD;">有生命周期钩子：onMounted</span></span>
<span class="line"><span style="color:#A6ACCD;">有依赖注入inject</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">project</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">可以treeshake 的 证据是</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nextTick</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">observable</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F78C6C;">3.</span></span></code></pre></div><h2 id="_1-4-基本知识" tabindex="-1">1.4 基本知识 <a class="header-anchor" href="#_1-4-基本知识" aria-label="Permalink to &quot;1.4 基本知识&quot;">​</a></h2><h3 id="_1-4-1-composition-api-options-api区别" tabindex="-1">1.4.1 Composition API,options API区别 <a class="header-anchor" href="#_1-4-1-composition-api-options-api区别" aria-label="Permalink to &quot;1.4.1 Composition API,options API区别&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">vue2中使用的是options API 来定义一个组件内部的一些属性，如methods、data等等</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">写一个功能可以东西到处飞</span></span>
<span class="line"><span style="color:#A6ACCD;">2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">vue3 composition API主要就是为了解决API太过于分散的问题。将同一个功能下的api统一放到一个地方</span></span></code></pre></div><h3 id="_1-4-2-suspense" tabindex="-1">1.4.2 Suspense <a class="header-anchor" href="#_1-4-2-suspense" aria-label="Permalink to &quot;1.4.2 Suspense&quot;">​</a></h3><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">1.实现异步效果</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- Promise 未执行完成时，就会显示 Loding... 执行完毕后，就会显示数值 --&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Suspense</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      &lt;template #default&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">		&lt;!-- 执行完成的时候 --&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        &lt;AsyncShow /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      &lt;/template&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      &lt;template #fallback&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        &lt;h2&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">          Loading...</span></span>
<span class="line"><span style="color:#A6ACCD;">        &lt;/h2&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      &lt;/template&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">Suspense</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h2 id="_1-5-进阶" tabindex="-1">1.5 进阶 <a class="header-anchor" href="#_1-5-进阶" aria-label="Permalink to &quot;1.5 进阶&quot;">​</a></h2><h3 id="_1-5-1-少见的vue钩子" tabindex="-1">1.5.1 少见的vue钩子 <a class="header-anchor" href="#_1-5-1-少见的vue钩子" aria-label="Permalink to &quot;1.5.1  少见的vue钩子&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">option中</span></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#F78C6C;">1.1</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">errorCaptured</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;">在捕获了后代组件传递的错误时调用</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">仅dev环境</span></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#F78C6C;">1.2</span><span style="color:#A6ACCD;"> serverPrefetch：服务器上被渲染之前要完成的异步函数。（ssr可用）</span></span></code></pre></div><h3 id="_1-5-2-vue3-nexttick源码-3-2-45" tabindex="-1">1.5.2 vue3 nextTick源码（3.2.45） <a class="header-anchor" href="#_1-5-2-vue3-nexttick源码-3-2-45" aria-label="Permalink to &quot;1.5.2 vue3 nextTick源码（3.2.45）&quot;">​</a></h3><p>nextTick优先是微任务</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">v2.0.0 - v2.4.4 微任务 导致vue的渲染处理可能夹在事件冒泡或者多个连续事件之间进行</span></span>
<span class="line"><span style="color:#A6ACCD;">v2.5.0 - v2.5.1 宏任务  导致动画以及页面状态切换的渲染上太慢了。</span></span>
<span class="line"><span style="color:#A6ACCD;">v2.5.2 - v2.5.20 微宏并行</span></span>
<span class="line"><span style="color:#A6ACCD;">v2.6.0 - v2.6.12 微任务</span></span></code></pre></div><p>感觉比之前的简化了版本。把任务全部扔进任务队列中，也算是优化的一种方式</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">nextTick</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">&gt;(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">this</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">fn</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">this</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>
<span class="line"><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">p</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">currentFlushPromise</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">resolvedPromise</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fn</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fn</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">p</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">nexttick的边界处理中主要是设置了一个mutationObserver和</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">如果不知道类型或者不支持类型会执行宏任务setImmediate和settimeout。这两个的区别主要是观察者不同</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">$nextTick</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">offsetTop</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dsad</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">里面传入callback</span></span></code></pre></div><h3 id="_1-5-3-forceupdate原理" tabindex="-1">1.5.3 $forceUpdate原理 <a class="header-anchor" href="#_1-5-3-forceupdate原理" aria-label="Permalink to &quot;1.5.3 $forceUpdate原理&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">第一步：</span><span style="color:#FFCB6B;">$forceUpdate</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">i</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">f </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> (i</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">f</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">queueJob</span><span style="color:#A6ACCD;">(i</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">update)) </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">》关键在scheduler</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ts这个文件里面</span></span>
<span class="line"><span style="color:#A6ACCD;">第二步：搜索索引包含当前正在运行的作业。queue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">includes</span></span>
<span class="line"><span style="color:#A6ACCD;">第三步：调用queue厘米按的job queueFlush（当然里面最主要解决的是递归的嵌套</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">就是我们说的组件的job和watch）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">里面不用写任何东西，调用起来我们就简单的</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">$forceUpdate</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="_1-6-项目进阶" tabindex="-1">1.6 项目进阶 <a class="header-anchor" href="#_1-6-项目进阶" aria-label="Permalink to &quot;1.6 项目进阶&quot;">​</a></h2><h3 id="_1-6-1-动态侧边栏" tabindex="-1">1.6.1 动态侧边栏 <a class="header-anchor" href="#_1-6-1-动态侧边栏" aria-label="Permalink to &quot;1.6.1 动态侧边栏&quot;">​</a></h3><p>原理是通过侧边栏的name来进行vue文件的引用</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> routeOptions </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">path</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/login</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">login</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> routes </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> routeOptions</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">route</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">route</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">component</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">route</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">route</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">component</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">import</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">@/views/</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">route</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">.vue</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">route</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><h2 id="_1-8-vuex-pinia-redux" tabindex="-1">1.8 vuex | pinia | redux <a class="header-anchor" href="#_1-8-vuex-pinia-redux" aria-label="Permalink to &quot;1.8 vuex | pinia | redux&quot;">​</a></h2><h3 id="_1-1-1-上手安装" tabindex="-1">1.1.1 上手安装 <a class="header-anchor" href="#_1-1-1-上手安装" aria-label="Permalink to &quot;1.1.1  上手安装&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">上手安装</span></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#F78C6C;">1.1</span><span style="color:#A6ACCD;"> vuex</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">useStore</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./store</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#A6ACCD;">(store)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#F78C6C;">1.2</span><span style="color:#A6ACCD;"> pinia（id，state，getters，action）</span></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#F78C6C;">1.2</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> shell安装</span></span>
<span class="line"><span style="color:#A6ACCD;">npm install pinia </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">S</span></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#F78C6C;">1.2</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">  创建pinia实例</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createPinia</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">pinia</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> pinia </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createPinia</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#A6ACCD;">(pinia)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#F78C6C;">1.2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">4使用</span></span>
<span class="line"><span style="color:#82AAFF;">useUserStore</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">nickname</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#F78C6C;">1.3</span><span style="color:#A6ACCD;"> redux</span></span></code></pre></div><h3 id="_1-1-2-使用" tabindex="-1">1.1.2 使用 <a class="header-anchor" href="#_1-1-2-使用" aria-label="Permalink to &quot;1.1.2 使用&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//--------------------------------------</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">使用</span></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#F78C6C;">2.1</span><span style="color:#A6ACCD;"> pinia</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// stores/todo.js</span></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#F78C6C;">2.1</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defineStore</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">pinia</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> useUserStore </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineStore</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">persist</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 1.命名空间</span></span>
<span class="line"><span style="color:#A6ACCD;">  id: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">user</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//2.必须是箭头函数然后返回一个对象</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">state</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">nickname</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">user1111</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 3.计算属性,这里感觉更适合做获取器</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">getters</span><span style="color:#89DDFF;">:{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">nicknameGetter</span><span style="color:#89DDFF;">():</span><span style="color:#FFCB6B;">any</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">前缀---</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">+this.</span><span style="color:#A6ACCD;">nickname</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 4.同步异步操作都可以</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">actions</span><span style="color:#89DDFF;">:{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">actionPinia</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">这是action里面的操作</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//模块化可以这样</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">import useCounterStore from &#39;./counter.js&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">import useUserStore from &#39;./user.js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">export default function useStore(){</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    return {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        user:useUserStore(),</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        counter:useCounterStore()</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">使用起来 const { counter } = useStore()</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">{{ counter.double }}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#F78C6C;">2.2</span><span style="color:#A6ACCD;"> vuex </span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">createStore</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vuex</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> useStore </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createStore</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">state</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">todos</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">...</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">done</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    ]</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">getters</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">doneTodos</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">state</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">todos</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">filter</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;font-style:italic;">todo</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">todo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">done</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> Vue </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> Vuex </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vuex</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">Vue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#A6ACCD;">(Vuex)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> store </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> Vuex</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Store</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">modules</span><span style="color:#89DDFF;">:{</span><span style="color:#F07178;">user</span><span style="color:#89DDFF;">:{</span><span style="color:#A6ACCD;">name || state  || getter || action || mutation || mudules</span><span style="color:#89DDFF;">}},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">gettter</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">getter</span><span style="color:#676E95;font-style:italic;">//const getters = {sidebar: state =&gt; state.app.sidebar}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//模块化可以这样</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    modules: {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    app,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    settings,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    user,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    menu</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  }    </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    */</span></span></code></pre></div><h3 id="_1-1-3-pinia的-action" tabindex="-1">1.1.3 pinia的 action <a class="header-anchor" href="#_1-1-3-pinia的-action" aria-label="Permalink to &quot;1.1.3 pinia的 action&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Pinia</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$onAction</span><span style="color:#A6ACCD;">((</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// action 名称</span></span>
<span class="line"><span style="color:#A6ACCD;">  store</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  args</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// action 参数</span></span>
<span class="line"><span style="color:#A6ACCD;">  after</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  onError</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">) </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// action 调用前钩子</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">after</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">result</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// action 调用后钩子</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">onError</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">error</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 出错时钩子，捕获到 action 内部抛出的 error</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><h3 id="_1-1-4-mapstate" tabindex="-1">1.1.4 mapState <a class="header-anchor" href="#_1-1-4-mapstate" aria-label="Permalink to &quot;1.1.4 mapState&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">一个组件要获取多个 state 的时候，声明计算属性就会变得重复和冗余</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> store </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useStore</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">computed</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mapState</span><span style="color:#A6ACCD;">([</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    mapState({</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">       sCounter: state =&gt; state.name,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">       ......</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     })</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    */</span></span>
<span class="line"><span style="color:#89DDFF;">     </span><span style="color:#676E95;font-style:italic;">// 映射 this.count 为 store.state.count</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">count</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  ])</span></span></code></pre></div><h3 id="_1-1-5-pinia为什么比vuex好" tabindex="-1">1.1.5 pinia为什么比vuex好 <a class="header-anchor" href="#_1-1-5-pinia为什么比vuex好" aria-label="Permalink to &quot;1.1.5 pinia为什么比vuex好&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ts的支持</span></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Pinia只有store的概念。官方的模块化概念去除，使用可以通过对象俩进行实现、</span></span>
<span class="line"><span style="color:#A6ACCD;">3</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">actions支持同步和异步</span></span>
<span class="line"><span style="color:#A6ACCD;">4</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">更加简单例如： dispatch的作用</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">专门用来触发action</span></span>
<span class="line"><span style="color:#A6ACCD;">5</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">持久化 npm i pinia</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">plugin</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">persist </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">save</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createPinia</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">pinia</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> piniaPluginPersist </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">pinia-plugin-persist</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> store </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createPinia</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">store</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#A6ACCD;">(piniaPluginPersist)</span></span>
<span class="line"><span style="color:#A6ACCD;">之后再defineStore中</span></span>
<span class="line"><span style="color:#FFCB6B;">persist</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#FFCB6B;">enabled</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="_1-9-css-in-js方案" tabindex="-1">1.9 css in js方案 <a class="header-anchor" href="#_1-9-css-in-js方案" aria-label="Permalink to &quot;1.9 css in js方案&quot;">​</a></h2><h2 id="_1-10-vue脚手架" tabindex="-1">1.10 vue脚手架 <a class="header-anchor" href="#_1-10-vue脚手架" aria-label="Permalink to &quot;1.10 vue脚手架&quot;">​</a></h2><h2 id="_1-11-react脚手架" tabindex="-1">1.11 react脚手架 <a class="header-anchor" href="#_1-11-react脚手架" aria-label="Permalink to &quot;1.11  react脚手架&quot;">​</a></h2><h2 id="_1-12表单方案" tabindex="-1">1.12表单方案 <a class="header-anchor" href="#_1-12表单方案" aria-label="Permalink to &quot;1.12表单方案&quot;">​</a></h2><h2 id="_1-13-解决vue-的-seo-首屏" tabindex="-1">1.13 解决vue 的 seo + 首屏 <a class="header-anchor" href="#_1-13-解决vue-的-seo-首屏" aria-label="Permalink to &quot;1.13 解决vue 的 seo + 首屏&quot;">​</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">这里我们使用了prerender-spa-plugin这个webpack插件，他的作用就是将我们指定的路由进行预渲染到html，进而解决首次加载白屏时间长问题，以及一定程度上解决seo问题。在vue-cli3.0中，我们的相关配置是被隐藏起来的，我们可以通过vue.config.js来将我们的配置合并到默认配置中。</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">预渲染也有它的缺点：那就是预渲染的页面内容可能与真实内容由一定出入(data中先直接写入数据先可以优化seo) 可以考虑采用骨架屏的方式来进行首屏加载的白屏过渡，但是这样就无法优化seo了</span></span></code></pre></div>`,92),e=[o];function t(c,r,i,y,D,F){return a(),n("div",null,e)}const d=s(p,[["render",t]]);export{A as __pageData,d as default};
