import{_ as s,o as a,c as n,R as l}from"./chunks/framework.408c4d71.js";const F=JSON.parse('{"title":"2.Git","description":"","frontmatter":{},"headers":[],"relativePath":"know/计算机基础/2.Git.md","filePath":"know/计算机基础/2.Git.md","lastUpdated":null}'),p={name:"know/计算机基础/2.Git.md"},o=l(`<h1 id="_2-git" tabindex="-1">2.Git <a class="header-anchor" href="#_2-git" aria-label="Permalink to &quot;2.Git&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#_2-1-常用命令">2.1.常用命令</a></li><li><a href="#_2-2-git-hook">2.2 git hook</a></li><li><a href="#_2-3-一些八股">2.3 一些八股</a><ul><li><a href="#_2-3-1-对rebase的看法">2.3.1 对rebase的看法</a></li><li><a href="#_2-3-2-cherry-pick">2.3.2 cherry-pick</a></li></ul></li><li><a href="#_2-4-一些规范">2.4 一些规范</a></li></ul></nav><h2 id="_2-1-常用命令" tabindex="-1">2.1.常用命令 <a class="header-anchor" href="#_2-1-常用命令" aria-label="Permalink to &quot;2.1.常用命令&quot;">​</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git pull 拉取远程仓库</span></span>
<span class="line"><span style="color:#A6ACCD;">git add . 跟踪所有改动的文件</span></span>
<span class="line"><span style="color:#A6ACCD;">git commit -m &quot;&quot; 提交改动到本地仓库</span></span>
<span class="line"><span style="color:#A6ACCD;">git push 推送到远程仓库</span></span>
<span class="line"><span style="color:#A6ACCD;">git checkout &lt;branch&gt; 切换分支</span></span>
<span class="line"><span style="color:#A6ACCD;">git clone/init 初始化</span></span>
<span class="line"><span style="color:#A6ACCD;">git log 查看历史</span></span>
<span class="line"><span style="color:#A6ACCD;">git revert &lt;commit&gt; 撤销指定提交</span></span></code></pre></div><p>1.git pull 和 git fetch + git merge 但是git fetch可以看到更新情况，也就更安全</p><p>2.Git无法自动合并分支时，要先解决冲突再提交，或者使用 <code>git push -f</code>强制覆盖</p><h2 id="_2-2-git-hook" tabindex="-1">2.2 git hook <a class="header-anchor" href="#_2-2-git-hook" aria-label="Permalink to &quot;2.2 git hook&quot;">​</a></h2><p>githook是原理是.git文件夹里面有hooks里面有很多hook，我们只需要写bash脚本，特定的时间就会做特定的事情 husty会自定义目录执行特定时间脚本（主要是precommit</p><h2 id="_2-3-一些八股" tabindex="-1">2.3 一些八股 <a class="header-anchor" href="#_2-3-一些八股" aria-label="Permalink to &quot;2.3 一些八股&quot;">​</a></h2><h3 id="_2-3-1-对rebase的看法" tabindex="-1">2.3.1 对rebase的看法 <a class="header-anchor" href="#_2-3-1-对rebase的看法" aria-label="Permalink to &quot;2.3.1 对rebase的看法&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">实际开发中不应该一直的push直线，在关键的节点上，比如从master创建了bug修复的补丁分支，那么把bug分支的代码往master合时就不应该采用rebase，而是采用merge，这样可以清晰的看到，何时创建的bug分支，在bug分支上干了啥，何时合入msater，这样更有利于以后审计、回溯等质量活动的开展</span></span></code></pre></div><h3 id="_2-3-2-cherry-pick" tabindex="-1">2.3.2 cherry-pick <a class="header-anchor" href="#_2-3-2-cherry-pick" aria-label="Permalink to &quot;2.3.2  cherry-pick&quot;">​</a></h3><p>把指定的<a href="https://so.csdn.net/so/search?q=commit&amp;spm=1001.2101.3001.7020" target="_blank" rel="noreferrer">commit</a>，拉到一个当前的分支上。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git cherry-pick commitID</span></span></code></pre></div><h2 id="_2-4-一些规范" tabindex="-1">2.4 一些规范 <a class="header-anchor" href="#_2-4-一些规范" aria-label="Permalink to &quot;2.4  一些规范&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">目前行业最为广泛规范是 Conventional Commits[</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">] 很多项目包括 Auglar 也在使用。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">可以根据以上规范制定适合自己团队的规范，例如：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">JIRA</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1234</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">feat</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> support for async execution</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">^-------^</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">^--^</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">^-------------------------^</span></span>
<span class="line"><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">         </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">     </span><span style="color:#89DDFF;">|</span></span>
<span class="line"><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">         </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">     </span><span style="color:#89DDFF;">+--&gt;</span><span style="color:#A6ACCD;"> Summary </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> present tense</span><span style="color:#89DDFF;">.</span></span>
<span class="line"><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">         </span><span style="color:#89DDFF;">|</span></span>
<span class="line"><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">         </span><span style="color:#89DDFF;">+--&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> feat</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> fix</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> docs</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> style</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> refactor</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> perf</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> test or chore</span><span style="color:#89DDFF;">.</span></span>
<span class="line"><span style="color:#89DDFF;">|</span></span>
<span class="line"><span style="color:#89DDFF;">+--&gt;</span><span style="color:#A6ACCD;"> Jira ticket number</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">Type 类型必须是下面之一，</span><span style="color:#FFCB6B;">并且为小写</span><span style="color:#89DDFF;">:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">feat</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> 修改</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">增加新功能</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">fix</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> 修改bug的变更</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">docs</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> 文档相关变更</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">style</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">不影响代码含义的变更</span><span style="color:#A6ACCD;">(空白、格式、缺少符号等)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">refactor</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> 代码重构变更</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">perf</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> 改进性能的变更</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">test</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> 添加</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">修改现有的测试</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">chore</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Build</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">gitignore或辅助工具、</span><span style="color:#82AAFF;">库</span><span style="color:#A6ACCD;">(如文档生成)等变更</span></span></code></pre></div>`,16),e=[o];function t(c,r,i,C,D,y){return a(),n("div",null,e)}const h=s(p,[["render",t]]);export{F as __pageData,h as default};
